{"ast":null,"code":"import _ from 'lodash'; // package installed using npm install lodash . The main function is to memoize(cache) the data temporarily.\n\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  // console.log('About to fetch posts');\n  await dispatch(fetchPosts()); // console.log('Fetched posts');\n\n  const userIds = _.uniq(_.map(getState().posts, 'userId')); // lodash version of map function. _uniq will return arrays of unique userId\n\n\n  userIds.forEach(id => dispatch(fetchUser(id)));\n};\nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get('/posts');\n  dispatch({\n    type: 'FETCH_POSTS',\n    payload: response.data\n  });\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n  dispatch({\n    type: 'FETCH_USER',\n    payload: response.data\n  });\n}; // export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\n// // Below the function name starts with _fetchUser to remind anyone who checks the code not to change the function unless he should do it.(video-264)\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n//     dispatch({ type: 'FETCH_USER', payload: response.data});\n// });","map":{"version":3,"sources":["C:/Users/Bibek/Desktop/MERN/react-projects/react-redux/blog/src/actions/index.js"],"names":["_","jsonPlaceholder","fetchPostsAndUsers","dispatch","getState","fetchPosts","userIds","uniq","map","posts","forEach","id","fetchUser","response","get","type","payload","data"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd,C,CAAwB;;AAExB,OAAOC,eAAP,MAA4B,yBAA5B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE;AACA,QAAMD,QAAQ,CAACE,UAAU,EAAX,CAAd,CAFkE,CAGlE;;AACA,QAAMC,OAAO,GAAGN,CAAC,CAACO,IAAF,CAAOP,CAAC,CAACQ,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAwB,QAAxB,CAAP,CAAhB,CAJkE,CAIP;;;AAE3DH,EAAAA,OAAO,CAACI,OAAR,CAAgBC,EAAE,IAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAA9B;AACH,CAPM;AASP,OAAO,MAAMN,UAAU,GAAG,MAAM,MAAMF,QAAN,IAAkB;AAC9C,QAAMU,QAAQ,GAAG,MAAMZ,eAAe,CAACa,GAAhB,CAAoB,QAApB,CAAvB;AAEAX,EAAAA,QAAQ,CAAC;AAAEY,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAML,SAAS,GAAGD,EAAE,IAAI,MAAMR,QAAN,IAAkB;AAC7C,QAAMU,QAAQ,GAAG,MAAMZ,eAAe,CAACa,GAAhB,CAAqB,UAASH,EAAG,EAAjC,CAAvB;AAEAR,EAAAA,QAAQ,CAAC;AAAEY,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAxC,GAAD,CAAR;AACH,CAJM,C,CAOP;AAGA;AACA;AACA;AAEA;AACA","sourcesContent":["import _ from 'lodash'; // package installed using npm install lodash . The main function is to memoize(cache) the data temporarily.\r\n\r\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\r\n    // console.log('About to fetch posts');\r\n    await dispatch(fetchPosts());\r\n    // console.log('Fetched posts');\r\n    const userIds = _.uniq(_.map(getState().posts, 'userId')); // lodash version of map function. _uniq will return arrays of unique userId\r\n\r\n    userIds.forEach(id => dispatch(fetchUser(id)));\r\n}\r\n\r\nexport const fetchPosts = () => async dispatch => {\r\n    const response = await jsonPlaceholder.get('/posts');\r\n    \r\n    dispatch({ type: 'FETCH_POSTS', payload: response.data})\r\n};\r\n\r\nexport const fetchUser = id => async dispatch => {\r\n    const response = await jsonPlaceholder.get(`/users/${id}`);\r\n \r\n    dispatch({ type: 'FETCH_USER', payload: response.data});\r\n}\r\n\r\n\r\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\r\n\r\n\r\n// // Below the function name starts with _fetchUser to remind anyone who checks the code not to change the function unless he should do it.(video-264)\r\n// const _fetchUser = _.memoize(async (id, dispatch) => {\r\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\r\n \r\n//     dispatch({ type: 'FETCH_USER', payload: response.data});\r\n// });"]},"metadata":{},"sourceType":"module"}